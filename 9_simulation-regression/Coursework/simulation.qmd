---
title: "Distributions and Simulation"
format: 
  html: 
    theme: minty
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
editor: visual
execute: 
  echo: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
```

`r emo::ji("play button")` Watch Videos: 17 minutes

-   `r emo::ji("link")` Link to **all** Slides from Videos: [here](https://app.box.com/s/zcnbbt2xepty8ztg56ikdgdxz8oiyvws)

`r emo::ji("book")` Readings: 15-20 minutes

`r emo::ji("computer")` Activities: 30 minutes

`r emo::ji("check")` Check-ins: 2 (combined into 1 Canvas Check-in)

------------------------------------------------------------------------

## Simulation in R

`r emo::ji("book")` [Required Reading -- *R Programming for Data Science* : Simulation](https://bookdown.org/rdpeng/rprogdatascience/simulation.html)

`r emo::ji("play button")` [Required Video -- Simulating Data in R (17 minutes)](https://www.youtube.com/watch?v=J5XQaxmznNE)

------------------------------------------------------------------------

`r emo::ji("check")` **Check-in: The `r`, `p`, `q`, and `d` functions**

Try to predict what the following outputs will be **WITHOUT** running the code in R. Drawing pictures of the relevant distributions may help.

(Yes, it is very easy to "cheat" on this question. But this is for your practice, and I recommend you give it some thought.)

```{r, eval = FALSE}
## a
pnorm(-4, mean = 2, sd = 4)

## b
qnorm(.975, mean = 2, sd = 4)

## c
dnorm(1.5, mean = 2, sd = 4)

```

**Question 1:** Explain in one sentence why each of the functions above produced the output you obtained.

**Question 4:** Explain in one sentence why `rnorm(mean = 0, sd = 1)` gives an error.

**Question 5:** Explain in one sentence why `dnorm(2, mean = 0, sd = 1)` will always produce a number between 0 and 1.

------------------------------------------------------------------------

## Setting a Random Number Seed

Functions like `rnorm()` rely on something called **pseudorandomness**. Because computers can never be *truly* random, complicated processes are implemented to make "random" number generation be so unpredictable as to behave like true randomness.

This means that projects involving simulation are harder to make **reproducible**. For example, here are two identical lines of code that give different results!

```{r}
rnorm(1, mean = 0, sd = 1)
```

```{r}
rnorm(1, mean = 0, sd = 1)
```

Fortunately, pseudorandomness depends on a **seed**, which is an arbitrary number where the randomizing process starts. Normally, R will choose the seed for you, from a pre-generated vector:

```{r}
head(.Random.seed)
```

However, you can also choose your own seed using the `set.seed()` function. This guarantees your results will be consistent:

```{r}
set.seed(1234)
rnorm(1, mean = 0, sd = 1)
```

```{r}
set.seed(1234)
rnorm(1, mean = 0, sd = 1)
```

Of course, it doesn't mean the results will be the same in every subsequent run if you forget or reset the seed in between each line of code!

```{r}
set.seed(1234)
rnorm(1, mean = 0, sd = 1)

## Calling rnorm() again without a seed "resets" the seed! 
rnorm(1, mean = 0, sd = 1)
```

It is very important to always set a seed at the **beginning** of an R Markdown document that contains any random steps, so that your knitted results are consistent.

Note, though, that this only guarantees your knitted results will be the same *if the code has not changed*.

Changing up any part of the code will re-randomize everything that comes after it!

------------------------------------------------------------------------

### Plotting Distributions

Here is the code that made one of the plots from the lecture video:

```{r, message = FALSE, warning = FALSE}
my_samples <- tibble(height = rnorm(n = 100, 
                                    mean = 67, 
                                    sd = 3))

my_samples %>%
  ggplot(aes(x = height)) +
  geom_histogram(aes(y = ..density..), 
                 binwidth = 1.75, fill = "grey") +
  stat_function(fun = ~ dnorm(., mean = 67, sd = 3), 
                col = "cornflowerblue", lwd = 2) + 
  xlim(c(55, 80))
```

------------------------------------------------------------------------

`r emo::ji("check")` **Check-in: Plotting Simulations**

Re-create this plot from the lecture slides: (The two colors are "cornflowerblue" and "deeppink")
