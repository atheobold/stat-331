---
title: "A Few More Data Wrangling Tools"
author: "STAT 331"
format: 
  revealjs:
    logo: images/ggplot2.png
    theme: night
    self-contained: true
editor: visual
execute: 
  warning: false
  message: false
---

```{r packages}
#| include: false
library(tidyverse)
```

##  {background-color="#D4D4D4"}

::: {style="margin-top: 100px; font-size: 2em; color: #000000;"}
A few words about `drop_na()`
:::

. . .

::: {.incremental}
-   Easy tool to remove missing values
-   Unilaterally removes **any** row with a missing value for **any** variable
-   **But** you can specify what columns it should look at for missing values!
:::

##

::: {style="margin-top: 50px; font-size: 2em; color: #dd5227;"}
Summarizing Frequencies
:::

. . .

::: columns
::: {.column width="40%"}
`count()` -- counts the values of one or more **categorical** variables
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
starwars |> 
  count(homeworld)
```
:::
:::

. . .

::: columns
::: {.column width="40%"}
The `sort` argument specifies if the resulting tibble should be sorted in
descending order
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
starwars |> 
  count(homeworld, 
        sort = TRUE)
```
:::
:::


##

::: {style="margin-top: 50px; font-size: 2em; color: #dd5227;"}
Finding Unique Groups
:::

. . .

`distinct()` -- selects the unique / distinct rows from a dataset

. . .

<center>
::: {style="font-size: 1.5em;"}
**Arguments**
:::
</center>

::: {.incremental}
-   `...` -- variables to use when determining uniqueness
    -   can use multiple!

-   `.keep_all` -- decides if all of the columns should be kept
    -   `FALSE` is default!
:::

##

::: {style="margin-top: 50px; font-size: 2em; color: #dd5227;"}
Discritizing Variables
:::

::: {.incremental}
-   `if_else()`
    -   Useful when there are two options

-   `case_when()`
    -   Useful when there are three or more options
:::

##

![](images/case_when_horst.png)

##  {background-color="#D4D4D4"}

::: {style="margin-top: 50px; font-size: 2em; color: #000000;"}
What if I want to perform the same operation across multiple columns?
:::

##

::: {style="margin-top: 50px; font-size: 2em; color: #dd5227;"}
`across()`
:::

. . .

> makes it easy to apply the same transformation to multiple columns, allowing
> you to use `select()` semantics inside in "data-masking" functions like
> `summarise()` and `mutate()`

. . .

</br>

::: {style="font-size: 1.25em;"}
`across(.cols = everything(), .fns = NULL, ...)`
:::

<!-- `.cols` -- columns in data to select -->
<!-- `.fns` -- functions to apply to selected columns -->
<!-- `...` -- additional arguments for the function calls (from `.fns`) -->

##

::: {style="margin-top: 50px; font-size: 2em; color: #dd5227;"}
Summarizing Multiple Columns
:::

. . .


```{r}
#| output-location: fragment
#| echo: true
starwars |> 
  summarise(
    across(
      height:mass, 
      mean, 
      na.rm = TRUE
      )
    )
```

##

::: {style="margin-top: 50px; font-size: 2em; color: #dd5227;"}
Conditional Summarizing
:::

```{r}
#| output-location: fragment
#| echo: true
starwars |> 
  summarise(
    across(
      where(is.numeric), 
      mean, 
      na.rm = TRUE
      )
    )

```

##

![](images/across_horst.png)

## `r emo::ji("heart")` `|>`

```{r}
#| echo: true
#| output-location: fragment
#| out-width: 60%
#| fig-align: center
starwars |> 
  drop_na(homeworld) |> 
  filter(gender == "feminine") |>
  ggplot(mapping = aes(x = homeworld, fill = homeworld)) + 
  geom_bar(position = "dodge") + 
  labs(title = "Homeworlds of Feminine Starwars Characters", 
       x = "") + 
  theme(legend.position = "none")
  
```

