---
title: "Recap of Data Wrangling with dplyr"
author: "STAT 331"
format: 
  revealjs:
    logo: images/
    theme: night
    self-contained: true
editor: visual
execute: 
  warning: false
  message: false
  echo: false
---


```{r packages}
#| include: false
library(xaringanthemer)
library(xaringan)
library(tidyverse)
library(flair)
library(ggridges)
library(gridExtra)
library(randomNames)
```

## Ugliest Plot

<https://docs.google.com/presentation/d/19u5djgMsPLtxoM-rfAQuLyP89B4nYdW8uBhNAEJQoS8/edit?usp=sharing>

## The tidyverse Philosophy 

![](images/hal_abelson.jpeg)

---

## A Vignette

. . .

`subset()`

> Return subsets of vectors, matrices or data frames which
> meet conditions.

. . .

::: columns
::: {.column width="40%"}
`subset` argument states how the **rows** of the dataframe should be filtered

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
subset(surveys, 
       subset = 
         species_id == "DS")
```

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
`select` argument states what **columns** should be selected from the
dataframe

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
subset(surveys, 
       subset = species_id == "DS", 
       select = c(weight, 
                  hindfoot_length)
       )
```
:::
:::

##  {background-color="#D4D4D4"}

<center>
::: {style="margin-top: 100px; font-size: 2em; color: #000000;"}
We want functions that accomplish **one** task!
:::
</center>

![](images/protest3.jpg)

##  {background-color="#D4D4D4"}

<center>
::: {style="margin-top: 100px; font-size: 2em; color: #000000;"}
We want functions with **intuitive** names!
:::
</center>

![](images/protest2.jpeg)

## Data Wrangling Verbs

::: columns
::: {.column width="40%"}
![](images/dplyr.png)
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
`filter()`

`select()`

`mutate()`

`summarize()`

`arrange()`

`group_by()`
:::
:::

---

##  {background-color="#D4D4D4"}

::: {style="font-size: 2em; color: #000000;"}
Brainstorm definitions for each verb
:::

::: columns
::: {.column width="30%"}
`filter()`

`select()`

`mutate()`

`group_by()`

`summarize()`

`arrange()`
:::

::: {.column width="5%"}
:::

::: {.column width="65%"}

:::
:::

---

## 

::: columns
::: {.column width="55"}
::: {style="font-size: 1.5em;"}
The Pipe `|>`
:::
:::

::: {.column width="15%"}
:::

::: {.column width="15%"}
```{r}
knitr::include_graphics("images/pipe.png")
```
:::

::: {.column width="15%"}
```{r}
knitr::include_graphics("images/not_a_pipe.jpg")
```
:::
:::

<center>
![](images/pipe_process.png)
</center>

---

## Preview Activity Review

::: columns
::: {.column width="35%"}
::: {style="font-size: 0.9em;"}
Suppose we would like to study how the ratio of penguin body mass to flipper
size differs across the species. Arrange the following steps into an order that 
accomplishes this goal (assuming the steps are connected with a `|>`).
:::
:::

::: {.column width="5%"}
:::

::: {.column width="60%"}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

arrange(med_mass_flipper_ratio)

group_by(species)

penguins

summarize(med_mass_flipper_ratio = 
            median(mass_flipper_ratio))

mutate(mass_flipper_ratio = 
         body_mass_g / flipper_length_mm)
```
:::
:::

##  {background-color="#D4D4D4"}

<center>
::: {style="font-size: 1.5em; color: #000000;"}
A Different Context 
:::
</center>

::: {style="font-size: 1.25m;"}
You have data on each Cal Poly student for the 2020-2021 academic year.
You are tasked with reporting how the number of CR/NC courses students took
differed based on department.
:::

```{r}
#| echo: false
#| code-overflow: scroll

students <- tibble(name = randomNames(n = 10), 
                   department = c(rep("Business", 3), 
                                  rep("Liberal Studies", 2),
                                  "Chemistry",
                                  rep("Biology", 2), 
                                  rep("Political Science", 2)
                                  ), 
                   CRNC_f20 = rbinom(10, size = 5, prob = 0.2),
                   CRNC_w21 = rbinom(10, size = 5, prob = 0.2),
                   CRNC_s21 = rbinom(10, size = 5, prob = 0.2)
                   )

slice_sample(students, n = 10) |> 
  knitr::kable() |> 
  kableExtra::kable_styling(font_size = 20)
```

##  {background-color="#D4D4D4"}

::: {style="font-size: 3em; color: #000000;"}
Problem Statement:
:::

Department totals for number of CR / NC courses

</br>

. . .

__What data wrangling operations would you use?__

__What order would you use to accomplish this goal?__

##  {background-color="#D4D4D4"}

::: {style="margin-top: 100px; font-size: 2em; color: #000000;"}
Step 1: Get totals for each student
:::

```{r name-totals}
#| output: false
#| echo: true
#| code-line-numbers: "|2"

students |> 
  group_by(name) |> 
  mutate(total_CRNC = sum(CRNC_f20, CRNC_w21, CRNC_s21)
         ) 

```

##  {background-color="#D4D4D4"}

::: {style="margin-top: 100px; font-size: 2em; color: #000000;"}
Step 2: Get department totals
:::


```{r dept-totals, echo = FALSE, eval = FALSE}
#| echo: true
#| output: false
#| code-line-numbers: "|5"

students |> 
  group_by(name) |> 
  mutate(total_CRNC = sum(CRNC_f20, CRNC_w21, CRNC_s21)
         ) |> 
  group_by(department) |> 
  summarize(final_total = sum(total_CRNC)
            )
```

##  {background-color="#D4D4D4"}

::: {style="margin-top: 100px; font-size: 2em; color: #000000;"}
Step 3: Arrange the totals
:::

```{r arrange}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "|8"

students |> 
  group_by(name) |> 
  mutate(total_CRNC = sum(CRNC_f20, CRNC_w21, CRNC_s21)
         ) |> 
  group_by(department) |> 
  summarize(dept_total = sum(total_CRNC)
            ) |> 
  arrange(desc(dept_total))
```

## Getting Specific

Often you are interested in **one** specific summary statistic!

::: columns
::: {.column width="35%"}
```{r}
#| echo: true
students |> 
  group_by(department) |> 
  count(sort = TRUE) 
```
:::

::: {.column width="5%"}
:::

::: {.column width="60%"}
```{r}
#| echo: true
students |> 
  group_by(department) |> 
  count() |> 
  filter(department == "Political Science")
```
:::
:::

## A Handy Tool

`pull()` 

- Extracts entries from dataframes

. . .

```{r}
#| echo: true
#| output-location: fragment
students |> 
  group_by(department) |> 
  count() |> 
  filter(department == "Political Science") |> 
  pull(n)
```

## Your Turn: PA Exploration

- Find your group
- Introduce yourself
- Decide on team roles (will change each week)
  * Reporter -- Types the solutions
  * Editor -- Asks professor **team** questions, double checks what is typed
  * Facilitator -- Leads discussion, makes sure everyone understands the task
  * Captain -- Encourages participation, enforces norms, brings conversation
  back if it deviates

