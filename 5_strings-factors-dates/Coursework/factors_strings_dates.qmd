---
title: "Factors, Strings, & Dates -- Oh, my!"
format: 
  html:
    css: ../../../youtube_container.css
    theme: minty
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
editor: visual
execute: 
  echo: false
---

```{r}
#| include: false

library(tidyverse)
library(flair)
library(lubridate)
```

------------------------------------------------------------------------

`r emo::ji("play button")` Watch Videos: 25 minutes

`r emo::ji("book")` Readings: 30-60 minutes

`r emo::ji("check")` Preview Activities: 3

------------------------------------------------------------------------

# Factors

Yes, we are **finally** going to learn about factors! 

![](images/cat_programmer.png)

</br>

`r emo::ji("book")` [Required Reading: *R4DS* -- Factors with forcats](https://r4ds.hadley.nz/factors.html)

::: column-margin
::: youtube-video-container
<iframe width="100%" height="auto" src="https://www.youtube.com/embed/dAiSYli7tVg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
:::
:::

::: {.callout-tip collapse="true"}
# Extra **forcats** resources

Useful functions from the **forcats** package (not an exhaustive list):

- `as_factor()`
- `fct_relevel()`
- `fct_reorder()`
- `fct_collapse()`

Download the [forcats cheatsheet](https://posit.co/wp-content/uploads/2022/10/factors-1.pdf).
:::

::: {.callout-caution}
# Preview Activity 12: Functions from forcats

**Q1** Which of the following tasks can `fct_recode()` accomplish?

-   changes the values of the factor levels
-   reorders the levels of a factor
-   remove levels of a factor you don't want
-   collapse levels of a factor into a new level

**Q2** Which of the following tasks can `fct_relevel()` accomplish?

-   reorders the levels of a factor
-   changes the values of the factor levels
-   remove levels of a factor you don't want
-   collapse levels of a factor into a new level

**Q3** What is the main difference between `fct_collapse()` and `fct_recode()`?

-   `fct_recode()` uses strings to create factor levels
-   `fct_recode()` uses groups to create factor levels
-   `fct_recode()` cannot create an "Other" group

**Q4** What ordering do you get with `fct_reorder()`?

-   largest to smallest based on another variable
-   order of appearance
-   largest to smallest based on counts
-   alphabetical order

**Q5** What ordering do you get with `fct_inorder()`?

-   order of appearance
-   alphabetical order
-   largest to smallest based on counts
-   largest to smallest based on another variable
:::

# Strings

`r emo::ji("book")` [Required Reading: *R4DS* -- Strings](https://r4ds.had.co.nz/strings.html)

::: column-margin
::: youtube-video-container
<iframe width="100%" height="auto" src="https://www.youtube.com/embed/Oo_MtXwpi2Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
:::
:::

Nearly always, when multiple variables are stored in a single column, they are stored as character variables. There are many different “levels” of working with strings in programming, from simple find-and-replaced of fixed (constant) strings to regular expressions, which are extremely powerful (and extremely complicated).

> Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems. - Jamie Zawinski

![Alternately, the xkcd version of the above quote](images/perl_problems.png)

::: {.callout-tip collapse="true"}
# Extra **stringr** resources 

Download the [stringr cheatsheet](https://posit.co/wp-content/uploads/2022/10/strings-1.pdf).

Table of string functions in the **stringr** R package. `x` is the string or vector of strings, `pattern` is a pattern to be found within the string, `a` and `b` are indexes, and encoding is a string encoding, such as UTF8 or ASCII.

::: columns
::: {.column width="40%"}
**Task** 

1. Replace `pattern` with `replacement`

</br>

2. Convert case	

3. Strip whitespace from start/end	

4. Pad strings to a specific length	

5. Test if the string contains a pattern	

6. Count how many times a pattern appears in the string	

7. Find the first appearance of the pattern within the string	

8. Find all appearances of the pattern within the string	

9. Detect a match at the start/end of the string	

10. Subset a string from index a to b	

11. Convert string encoding	
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
**stringr**

1. `str_replace(x, pattern, replacement)` and `str_replace_all(x, pattern, replacement)`

2. `str_to_lower(x)`, `str_to_upper(x)`, `str_to_title(x)`

3. `str_trim(x)` , `str_squish(x)`

4. `str_pad(x, ...)`

5. `str_detect(x, pattern)`

6. `str_count(x, pattern)`

</br>

7. `str_locate(x, pattern)`

8. `str_locate_all(x, pattern)`

9. `str_starts(x, pattern) ,str_ends(x, pattern)`

10. `str_sub(x, a, b)`

11. `str_conv(x, encoding)`
:::
:::
:::


## Regular Expressions

Matching exact strings is easy - it’s just like using find and replace.

```{r dog-string}
#| echo: true
#| eval: true
human_talk <- "blah, blah, blah. Do you want to go for a walk?"
dog_hears <- str_extract(human_talk, "walk")
dog_hears

```


But, if you can master even a small amount of regular expression notation, you’ll have exponentially more power to do good (or evil) when working with strings. You can get by without regular expressions if you’re creative, but often they’re much simpler.

`r emo::ji("book")` [Highly Recommended Reading: *R4DS* -- Strings](https://r4ds.hadley.nz/regexps.html)

::: {.callout-caution}
## Preview Activity 13: Functions from stringr

**Q1** Which of the follow are differences between `length()` and `str_length()`?

-   `length()` gives the number of elements in a vector
-   `str_length()` gives the number of characters in a string
-   `str_length()` gives the number of strings in a vector
-   `length()` gives the dimensions of a dataframe

**Q2** What of the following is true about `str_replace()`?

-   `str_replace()` replaces the first instance of the pattern
-   `str_replace()` replaces the last instance of the pattern
-   `str_replace()` replaces every instance of the pattern

**Q3** `str_trim()` allows you to remove whitespace on what sides

-   both
-   left
-   right

**Q4** Which of the following does `str_sub()` use to create a substring?

-   starting position
-   ending position
-   pattern to search for

**Q5** Which of the following does `str_subset()` use to create a substring?

-   starting position
-   ending position
-   pattern to search for

**Q6** What does the `collapse` argument do in `str_c()`?

-   specifies a string to be used when combining inputs into a single string
-   specifies whether the string should be collapsed
:::

# Dates

In order to fill in an important part of our toolbox, we need to learn how to work with date variables. These variables feel like they should be simple and intuitive given we all work with schedules and calendars everyday. However, there are little nuances that we will learn to make working with dates and times easier.

`r emo::ji("book")` [Required Reading: *R4DS* -- Dates and Times](https://r4ds.hadley.nz/datetimes.html)

::: column-margin
::: youtube-video-container
<iframe width="100%" height="auto" src="https://www.youtube.com/embed/SEPjN2AJqbo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
:::
:::

::: {.callout-tip collapse="true"}
# Extra resources

- [**lubridate** website](https://lubridate.tidyverse.org/reference/)

- Download the [**lubridate**  cheatsheet](https://posit.co/wp-content/uploads/2022/10/lubridate-1.pdf)

-   [A more in-depth discussion of the POSIXlt and POSIXct data classes.](https://www.cyclismo.org/tutorial/R/time.html)

-   [A tutorial on lubridate](https://data.library.virginia.edu/working-with-dates-and-time-in-r-using-the-lubridate-package/) - scroll down for details on intervals if you have trouble with `%within%` and `%--%`
:::

::: {.callout-caution}
# Preview Activity 14: Functions from lubridate


**Q1** Which of the following is true about the year() function?

-   `year()` extracts the year of a datetime object
-   `year()` creates a duration object to be added to a datetime

**Q3** What `tz` would you use for San Luis Obispo?

**Q3** Which of the following is true about the `%within%` operator?

-   it checks if a date is included in an interval
-   it returns a logical value
-   it creates an interval with a start and end time

**Q4** Which of the following is true about the `%--%` operator?

-   it creates an interval with a start and end time
-   it returns a logical value
-   it checks if a date is included in an interval

**Q5** What day does the `make_date()` function use as default if no `day` argument is provided?
:::
