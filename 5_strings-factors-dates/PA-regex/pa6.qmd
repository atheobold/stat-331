---
title: "Puzzle Activity:  Regular Expressions"
format: 
  html: 
    theme: minty
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
editor: visual
execute: 
  echo: false
  include: false
  eval: false
---

## Setup

Run the code below to load the scrambled message:

```{r}
library(tidyverse)

```

```{r, include = TRUE, message = FALSE}
message <- read_csv("https://www.dropbox.com/s/lgpn3vmksk3ssdo/scrambled_message.txt?dl=1") %>% 
  pull(Word)
```

In this activity, a "word" is a set of characters with no white space.  That is,
even though many of elements of the scrambled mess vector are nonsense, and some
have punctuation, you can consider each element to be a "word".

## Warm-up exercises

1. How many characters are in the scrambled message?

```{r}
str_length(message) %>% 
  sum()
```

2. How many words are in the scrambled message?

```{r}
str_subset(message, pattern = "\\w") %>% 
  length()
```

3. Print out every piece of a word in the scrambled message that starts with the
letter "m". 

```{r}
message[str_detect(message, pattern = "^m")]
```

4. Print out every piece of a word in the scrambled message that ends with the
letter "z"

```{r}
message[str_detect(message, pattern = "z$")]
```

5. Print out every punctuation symbol in the scrambled message. 

```{r}
str_extract(message, pattern = "[^\\w\\s]") %>% 
  discard(is.na) %>% 
  unique()
```

6. Print out the longest word in the scrambled message.

```{r}
message[
  str_length(message) == max(str_length(message))
  ## Locate the index whose length is equal to the maximum
  ] 
```

---

## Decode a message

Complete the following steps to decode the message.  

1. Remove any spaces before or after each word.

```{r}
message <- str_trim(message, side = "both")
```

2. No word should be longer than 16 characters. Drop all extra characters off
the end of each word.

```{r}
message <- message %>% 
  str_sub(start = 1, end = 16)
```

3. Any time you see the word "ugh", with any number of h's, followed by a
punctuation mark, delete this.

```{r}
message <- message %>% 
  str_replace_all(pattern = "ugh+[!,?.;]+", replacement = "")
```

4. Replace all instances of exactly 2 a's with exactly 2 e's.

```{r}
message <- message %>% 
  str_replace_all(pattern = "[aa]{2}", replacement = "ee")
```

5. Replace all z's with t's.

```{r}
message <- message %>% 
  str_replace_all(pattern = "z", replacement = "t")
```


6. Every word that ends in b, change that to a y.  

```{r}
message <- message %>% 
  str_replace(pattern = "b$", replacement = "y")
```

7. Every word that starts with k, change that to a v.

```{r}
message <- message %>% 
  str_replace(pattern = "^[kK]", replacement = "v")
```

8. Use `str_c` to recombine all your words into a message.

```{r}
message_combined <- str_c(message, collapse = " ")
```

9. Find the movie this quote is from.

<!-- V for Vindetta -->