---
title: "Lab 2: Exploring Rodents with ggplot2"
format: 
  html: 
    theme: minty
    self-contained: true
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
editor: visual
---

# Lab Instructions

The questions in this lab are noted with numbers and boldface. Each question
will require you produce code, whether it is one line or multiple lines.

This document is quite "plain," meaning it does not have any special formatting.
As part of your demonstration of working with Quarto documents, I would
encourage you to spice your documents up (e.g., declaring execution options,
specifying how your figures should be output, formatting your code output).

## Seeking Help

Part of learning to program is learning from a variety of resources. Thus, I
expect you will use resources beyond the textbook used for this course. However,
there is an important balance between copying someone else's code and ***using
their code to learn***. The [course syllabus](https://docs.google.com/document/d/1-SSRp_mXFNgYiy4uW9tlcpxDpQH4OuMqK-Hh4v5AvZI/edit?usp=sharing) defines what is considered plagiarism in this course. Essentially,
if you use external resources, I want to know about it. You can "inform" me of
any resources you used by pasting the link to the resource in a code comment
next to where you used that resource.

You are permitted and encouraged to work with your peers as you complete the
lab assignment, but you are expected to do your own work. Copying from each
other is cheating, and letting people copy from you is also cheating. Don't do
either of those things.

# Set-up

In the code chunk below load in the packages necessary for your analysis. You
should only need the tidyverse and here packages for this analysis, unless you
decide to use additional resources.

```{r setup}

```

# Data Context

The Portal Project is a long-term ecological study being conducted near Portal,
AZ. Since 1977, the site has been used to study the interactions among rodents,
ants and plants and their respective responses to climate. To study the
interactions among organisms, we experimentally manipulate access to 24 study
plots. This study has produced over 100 scientific papers and is one of the
longest running ecological studies in the U.S.

We will be investigating the animal species diversity and weights found within
plots at the Portal study site. The dataset is stored as a comma separated value
(CSV) file. Each row holds information for a single animal, and the columns
represent:

| Column          | Description                        |
|-----------------|------------------------------------|
| record_id       | Unique id for the observation      |
| month           | month of observation               |
| day             | day of observation                 |
| year            | year of observation                |
| plot_id         | ID of a particular plot            |
| species_id      | 2-letter code                      |
| sex             | sex of animal ("M", "F")           |
| hindfoot_length | length of the hindfoot in mm       |
| weight          | weight of the animal in grams      |
| genus           | genus of animal                    |
| species         | species of animal                  |
| taxon           | e.g. Rodent, Reptile, Bird, Rabbit |
| plot_type       | type of plot                       |

# Reading the Data into R

We have seen in the practice activity that when importing a dataframe, the
columns that contain characters (i.e., text) can be coerced (=converted) into
the `factor` data type. We could set **`stringsAsFactors`** to **`FALSE`** to
avoid this hidden argument to convert our data type.

For **every** lab in this class, we will use the `read_csv()` function from the
 **`readr`** package (loaded with the `tidyverse`) instead of the `read.csv()`
function. This function **does not** coerce character variables
to factors, a behavior that many in the R community feel is unappealing.

### **Question 1**

Using the `read_csv()` function and the **here** package,
write the code to load in the `surveys.csv` dataset. For simplicity, store the 
dataset in an object named `surveys`.

```{r data}
# Code for question 1! 

```

## Inspecting the Data

```{r inspect-data}
# Code for questions 2 & 3!

```

### **Question 2**
What are the dimensions of these data?  
*Hint: Writing code is Step 1. You also need to connect the output of the code to what it tells you about the dimensions of the data.*

### **Question 3**
What are the data types of the variables in the dataset?  
*Hint: Yes, this question requires code. No, you do not need anything complicated.*

## Plotting with **`ggplot2`**

`ggplot()` graphics are built step by step by adding new elements. Adding layers
in this fashion allows for extensive flexibility and customization of plots.

To build a `ggplot()`, we will use the following basic template that can be used
for different types of plots:

```
ggplot(data = <DATA>, mapping = aes(<VARIABLE MAPPINGS>)) +  
   <GEOM_FUNCTION>()
```

Let's get started!

## Scatterplot

### **Question 4**
First, create a scatterplot of the relationship between `weight` (on the x-axis)
and `hindfoot_length` (on the y-axis).

```{r scatterplot}
# Code for question 4! 
 

```

We can see there are **a lot** of points plotted on top of each other. Let's try
and modify this plot to extract more information from it.

### **Question 5**
Add transparency (`alpha`) to the points, to make the points more transparent
and (possibly) easier to see.

```{r alpha}
#Code for question 5!

```

Well, that is better, but there are still large clumps of data being plotted on
top of each other. Let's try another tool!

### **Question 6**
Add some jitter to the points in the scatterplot.  
*Hint: both `geom_point()` and `geom_jitter()` add points to the plot.*


```{r jitter}
# Code for question 6! 

```

## Faceting

Despite our best efforts there is still a substantial amount of overplotting
occurring in our scatterplot. Let's try splitting the dataset into smaller
subsets and see if that allows for us to see the trends a bit better.

### **Question 7**
Facet your jittered scatterplot by `species`.

```{r facet}
# Code for question 7

```

# Boxplots & Density Ridges

### **Question 8**
Create side-by-side boxplots to visualize the distribution of weight within each
species.

```{r boxplot-jitter-points}
# Code for question 8 (and 9 and 10 and 11 and 12)! :) 

```

A fundamental complaint of boxplots is that they do not plot the raw data.
However, with **ggplot** we can add the raw points on top of the boxplots!

### **Question 9**
Add another layer to your previous plot (above) that plots each observation.

Alright, this should look less than optimal. Your points should appear rather
stacked on top of each other. To make them less stacked, we need to jitter them
a bit, using `geom_jitter()`.

### **Question 10**
Remove the previous layer you had and include a `geom_jitter()` layer.

That should look a bit better! But its really hard to see the points when
everything is black.

### **Question 11**
Use the `color` argument in `geom_jitter()` to change the color of the points.
You are welcome to use whatever color you wish, some of my favorites are:
tomato, cadetblue, and darkseagreen :)

Great! Now that you can see the points, you should notice something odd: there
are two colors of points still being plotted. Some of the observations are being
plotted twice, once from `geom_boxplot()` as outliers and again from
`geom_jitter()`!

### **Question 12**
Inspect the help file for `geom_boxplot()` and see how you can remove the
outliers from being plotted by `geom_boxplot()`. Make this change in the code
above!

# Customization

Some small changes that make **big** differences to plots. One of these changes
are better labels for a plot's axes and legend.

### **Question 13**
Using the code you created in question 12, modify the x-axis and y-axis labels
to describe what is being plotted. Be sure to include any necessary units!

```{r}
# Code for question 13! 

```

Some people (and journals) prefer for boxplots to be stacked with a specific
orientation! Let's practice changing the orientation of our boxplots.

### **Question 14**
Flip the orientation of your boxplots from question 10. If you created
side-by-side boxplots (stacked horizontally), your boxplots should be stacked
vertically. If you had vertically stacked boxplots, you should stack your 
boxplots horizontally!  
*Hint: You __do not__ need to add an additional layer.*

```{r}
# Code for question 14!

```

# Lab 1 Submission

Once you have completed your lab you should upload **both** your rendered HTML
file and your Quarto file to Canvas. 

**Code Visibility**

All of your code needs to be visible! There should be no hidden code in your
Quarto file! That means, there should be no `#| include: false` or 
`#| echo: false` options in your code chunks. 

::: {.callout-tip}
If you want to remove messages or warnings from your output, you can do this
with `#| message: false` or `#| warning: false`options.
:::

**Visualization Visibility**

By default Quarto documents do not produce self-contained HTML files. This is 
not what we want! Your HTML file **must** be self contained, so **all** the 
visualizations are included in the file. Please follow the Lab 1 instructions
to ensure your HTML file is self contained. 


