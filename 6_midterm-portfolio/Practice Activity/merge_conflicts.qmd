---
title: "Collaborating within a GitHub Repo"
format: 
  html: 
    theme: minty
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
editor: visual
execute: 
  echo: false
---

```{r setup}
#| include: false
library(knitr)
library(rmdformats)
```

This activity will give you a taste of what working collaboratively in Github 
looks like. 


# Set-up

I believe learning about merge conflicts is best done in small groups! I want
for you to assign each group member a number, since you will be referencing it 
as you work through this activity. 


# Creating a Repo

**Member 3**: 

- Create a new Github repository titled "stat-331-PA8"
- Click on the "Settings" tab
- Click on "Manage access" 
- Click on "Invite a collaborator" 

Add your other group members to the repository using their username or email


# Accessing the Repo

**All other Members** (e.g. 1, 2, 4, and 5): 

- Verify repository invite in your email
- Open the repository in Github


# Cloning the Repo

**Every** member: 

- Clone the repository into a new RStudio project
  * Copy the HTTPS address from the repo
  * Create a new folder called "PA6" on your desktop
  * Click on "New project" in RStudio
  * Choose Version Control"
  * Choose "Git"
  * Paste the HTTPS address in the repository address line
  * Click on the "Browse" button to navigate to your PA6 folder (on your desktop)
  * Create the project! 
  
  
# Pulling Changes from the Repo

Take turns in completing the exercise, only one member at a time:

- **Member 1**: 
  * Create a new Quarto file (using the standard template)
  * Title the document "Practice Activity 6" 
  * Save the document as `PA6.qmd`
  * Render the document 
  * Commit **both** the `PA6.qmd` and `PA6.html` files with an explanatory
  message
  * Push the changes to the repository
  
**All other members:** Pull the changes that were made! 

# Pushing Changes & Not Pulling 

- **Member 2**: 
  * Change the author name in the document to have everyone's *first* names
  * Render the document
  * Commit the changes
  * Push the changes 
  
**All other members:** Do not pull the changes that were made! 

# Making The Same Changes

- **Member 4** (or 3 if there are only three group members): 
  * Change the author name in the document to have everyone's first **and** last
  names. 
  * Render the document
  * Commit your changes 
  * Push your changes

**You will get an error!** 

  * Pull the changes from the repo
  * Review the document with the merge conflict 
  (Note how the conflicting lines are marked!)
  * Resolve the conflict with the preferred change
  * Commit your changes
  * Push the changes to the repository 
  
**All other members:** Do not pull the changes that were made! 

# Making Different Changes

- **Member 1**: 

  * Change the first code chunk to find the product of 13 times 13. 
  * Render the document
  * Commit your changes
  * Push your changes 
  
**You will get an error, read it, and pull.** 

No merge conflicts should occur. Now push your changes.

**All other members:** Do not pull the changes that were made! 

# Making the Same Changes (Again)

- **Member 2**:

  * Change the first code chunk to find the product of 11 times 11.
  * Render the document 
  * Commit your changes
  * Push the changes to the repository
  
**You will get an error.**

  * Pull the changes from the repo
  * Review the document with the merge conflict
  * Clear the merge conflict by choosing the correct/preferred change
  * Commit your changes 
  * Push you changes
  

---

# Final Document 

**All members:** Pull, and observe the changes in your document.


# Submission

How does Git mark the start of lines with a merge conflict? Specifically, I want
the **four capital letter characters** with which every conflict is marked.



