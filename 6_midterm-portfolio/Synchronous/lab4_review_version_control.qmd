---
author: "STAT 331"
title: "Version Control"
title-slide-attributes:
    data-background-image: images/git-github.png
    data-background-size: contain
    data-background-opacity: "0.5"
format: 
  revealjs:
    self-contained: true
    auto-stretch: false
editor: visual
execute: 
  echo: false
---

#  {background-color="#B6CADA"}

::: {style="font-size: 3em; color: #000000;"}
A refresher on coding best practices...
:::

## `mutate()` vs `summarise()`

::: panel-tabset
### `mutate()` preserve observations

```{r}
#| out-width: 60%
knitr::include_graphics("images/mutate-sketch.jpeg")
```



### `summarise()` collapse observations

```{r}
#| out-width: 60%
knitr::include_graphics("images/summarise-sketch.jpeg")
```

:::

## Better alternatives to bar plots

```{r}
library(tidyverse)
avocado <- read_csv(here::here("4_tidyr-joins",
                               "Lab",
                               "avocado-updated-2020.csv"))

major_region <- c("West", "South Central",
                  "Great Lakes", "Midsouth", "Southeast",
                  "Northeast", "Plains", "Total U.S.")

avocado_clean <- avocado |> 
  #rename PLU codes and tidy up data
  rename(small_hass = "4046", 
         large_hass = "4225", 
         xlarge_hass = "4770") |> 
  mutate(geography_type = if_else(geography %in% major_region,
                                  "Major", "Metro"),
         across(type:geography_type, as.factor)
         )

avocado_california <- avocado_clean |> 
  filter(geography %in% c("Los Angeles", 
                          "San Diego", 
                          "Sacramento", 
                          "San Francisco")
         )

organic_price_diff <- avocado_california |> 
  pivot_wider(id_cols = c(date, year, geography, geography_type),
              names_from = type,
              values_from = average_price
              ) |> 
  mutate(price_diff = organic - conventional) 
```

*Bar plots are typically reserved for displaying frequencies*

::: panel-tabset
### Summary Data

```{r}
diff_summary <- organic_price_diff |> 
  group_by(geography) |> 
  summarise(mean_price_diff = mean(price_diff),
            sd_price_diff = sd(price_diff)
            ) |> 
  arrange(desc(mean_price_diff))
diff_summary 
```

### Bar plots

```{r}
#| echo: true
#| code-fold: true
#| fig-height: 3
#| fig-width: 5
#| fig-align: center

library(RColorBrewer)
library(scales)

diff_summary  |> 
  ggplot(aes(x = mean_price_diff, 
             y = geography,
             fill = geography)
         ) +
  geom_bar(stat = "identity") +
  labs(
    title = "Difference in Price between Organic and \nConventional Avocados",
    y = "") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_brewer(palette = "Dark2") +
  scale_x_continuous(name = "", 
                     labels = scales::label_dollar()
                     )
```

### Cleveland Dot Plots

Read more about [Cleveland Dot Plots](https://uc-r.github.io/cleveland-dot-plots)

```{r}
#| echo: true
#| code-fold: true
#| fig-height: 3
#| fig-width: 5
#| fig-align: center

diff_summary |> 
  arrange(desc(mean_price_diff)) |> 
  ggplot(aes(x = mean_price_diff, 
             y = geography,
             fill = geography)
         ) +
  geom_segment(aes(xend = 0,
                   yend = geography)
  ) +
  geom_point() +
  labs(title = "Difference in Price between Organic and \nConventional Avocados",
       y = "") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_brewer(palette = "Dark2") + 
  scale_x_continuous(name = "", 
                     labels = scales::label_dollar()
                     )
```
:::

## Little Bits and Bobs

::: panel-tabset
### Function syntax

What is wrong with this code?

```{r}
#| eval: false
#| echo: true
hiphop %>% 
  distinct(subj, .keep_all = TRUE) %>%
  filter(sex == "Male" & 
         between(age, 17, 23) &
         between(city, 10000, 60000)
         ) %>%
  slice_max(bieber) %>%
  select(subj)
```

### Superseded functions

```{r}
#| out-height: 80%
knitr::include_graphics("images/mutate_at.png") 
knitr::include_graphics("images/top_n.png")
```


### Multiple function calls

What is wrong with this code?

```{r}
#| eval: false 
#| echo: true 
avocado %>% 
  rename(Size_Small = `4046`) %>% 
  rename(Size_Large = `4225`) %>% 
  rename(Size_XL = `4770`)
```

### Facets

What is the difference between `facet_wrap()` and `facet_grid()`?

When should you use `facet_grid()`?
:::

#  {background-color="#B6CADA"}

::: {style="font-size: 3em; color: #000000;"}
Version Control
:::

## Git vs GitHub

::: columns
::: {.column width="47%"}
<br>

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://bornsql.ca/wp-content/uploads/2022/03/Git-Logo-2Color.png") 
```

-   Language for version control
-   Developed by Linus Torvalds (Linux, Android, Chrome OS)
-   Uses command line or GUI
:::

::: {.column width="3%"}
:::

::: {.column width="47%"}
```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://logos-world.net/wp-content/uploads/2020/11/GitHub-Emblem.png") 
```

-   Cloud-based hosting service
-   Basic services are free
-   Advanced services are paid (Similar to RStudio)

:::
:::

:::

## Why GitHub?

1.  A structured way for tracking changes to files over the course of a project.

2.  Makes it easy to have multiple people working on the same files at the same time.

3.  You can host a URL of fun things (like the class assignments, these slides, a personal website, etc.) with [GitHub pages](https://pages.github.com/).

*Think "track-changes" or "drop-box" history, but more structured.*

## Git Repositories

```{r}
#| fig-align: center
#| out-width: 20%

knitr::include_graphics("https://miro.medium.com/max/512/1*w07Er4gPg8H2Ew-P0HhxNA.png")
```

::: {style="font-size: 0.85em;"}
-   Think of this as a folder-directory for a single project (like your STAT-331 folder!)

-   You may have code, documentation, data, TODO lists, and more associated with a project.

-   To create a repository, you can start with your local computer first, or you can start with the remote (online) repository first.
:::


# Actions in Git

## Cloning a Repo

::: columns
::: column
Clone = create an exact copy locally
:::

::: column
```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("images/git_clone_diagram.png")
```
:::
:::

## Committing

::: {style="font-size: 0.85em; color: #000000;"}
Git tracks changes to each file that it is told to monitor, and as the files change, you provide short labels describing what the changes were and why they exist (called "commits").
:::

```{r}
#| fig-align: center
#| out-width: 50%
#| fig-cap: "Here, we commit the red line as a change to our file."
knitr::include_graphics("images/git-commit.png")
```

::: {style="font-size: 0.85em; color: #000000;"}
The log of these changes (along with the file history) is called your git commit history. This means you can always go back to old copies!
:::

## Pushing

::: columns
::: column
Updates the copy of the repository on another machine (e.g. on GitHub) so that it has the most recent changes you've made to your machine.
:::

::: column
```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/git_push_diagram.png")
```
:::
:::

## Pulling

::: columns
::: column
Updates your local copy of the repository (the copy on your computer) with the files that are "in the cloud" (on GitHub).
:::

::: column
```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/git_pull_diagram.png")
```
:::
:::

## Pushing and Pulling

```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/git_pushing_and_pulling.jpg")
```

## Merge Conflicts

::: {style="font-size: 0.9em; color: #000000;"}
Occur when you make changes to the same line as a collaborator either at the same time, or without starting from the same "state".

1.  Maybe you are working in real time on the same line of code or text.
2.  Maybe you forgot to push your changes last time you finished working.
3.  Maybe you forgot to pull your changes before you started working this time.
:::

```{r}
#| out-width: 60%
#| fig-align: center
knitr::include_graphics("images/same-conflict-pull.jpg")
```


## Workflow {#git-workflow}

::: columns
::: {.column width="45%"}
**Starting a new project/local repo**

::: incremental
::: {style="font-size: 0.9em; color: #000000;"}
1.  Clone the project or create a new repository
2.  Make some changes
3.  Commit the changes
4.  Pull any changes from the remote repository
5.  Resolve any merge conflicts
6.  Push the changes (and merged files)
:::
:::
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}

:::
:::

## Workflow

::: columns
::: {.column width="45%"}
**Starting a new project/local repo**

::: {style="font-size: 0.9em; color: #000000;"}
1.  Clone the project or create a new repository
2.  Make some changes
3.  Commit the changes
4.  Pull any changes from the remote repository
5.  Resolve any merge conflicts
6.  Push the changes (and merged files)
:::
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
**Working with an existing local repo**

::: incremental
::: {style="font-size: 0.9em; color: #000000;"}
1.  Pull the repo (especially if collaborating)
2.  Make some changes
3.  Commit the changes
4.  Pull any changes from the remote repository (again!)
5.  Resolve any merge conflicts
6.  Push the changes (and merged files)
:::
:::
:::

:::

#  {background-color="#B6CADA"}

::: {style="font-size: 3em; color: #000000;"}
Connect GitHub to RStudio
:::

## Rpackages we will need

Work in your console or an .Rscript for this...

1.  Install and load the {usethis} Rpackage

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
install.packages(usethis)
library(usethis)
```

2.  Install and load {gitcreds} RPackage

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
install.packages("gitcreds")
library(gitcreds)
```

## Generate your PAT (Personal Access Token)

::: columns
::: {.column width="60%"}
3.  `Generate token`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
create_github_token()
```

```{r}
#| fig-align: center
#| code-line-numbers: false
knitr::include_graphics("images/pat-generate.jpg")
```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
::: callout-warning
GitHub really doesn't like it when you do not have a PAT expiration date... but I don't ever want to deal with it again. Make sure your expiration date is AT LEAST through the end of the quarter (60 days).
:::
:::
:::

## Store your PAT

4.  Copy your PAT into RStudio

```{r}
#| fig-align: center
#| out-width: 60%
knitr::include_graphics("images/pat-copy.jpg")
```

5.  `Enter password or token:` Paste PAT

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
gitcreds_set()
```

## Verify PAT

You should be good to go! Let's verify.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
git_sitrep()
```

```{r}
#| out-width: 70%
#| out-height: 40%
knitr::include_graphics("images/git_sitrep.png")
```

## Tips for avoiding merge conflicts

::: incremental
::: {style="font-size: 0.9em; color: #000000;"}
-   Always **pull** before you start working and always **push** after you are done working!

-   In general, if you follow the [workflow for an existing local repo](#git-workflow) exactly, you only have problems if two of you are making local changes to the same line in the same file at the same time.

-   If you are working with collaborators in real time, **pull**, **commit**, and **push** often.

-   Git commits **lines** -- lines of code, lines of text, etc.

    -   Practice good code format and and put each sentence on its own line.
:::
:::

#  {background-color="#B6CADA"}

::: {style="font-size: 3em; color: #000000;"}
Creating your STAT 331 /531 portfolio repository
:::

## Forking a Repository

Fork the [STAT331_portfolio_template](https://github.com/atheobold/STAT331_portfolio_template) repository

![](images/fork.png)

## Create a New RStudio Project

::: columns
::: {.column width="45%"}
![](images/version_control_project.png)
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
![](images/git_project.png)
:::
:::

## Save Your Project

::: {style="font-size: 1.5em; color: #000000;"}
**Do not save your project in the _same_ folder as your STAT331.Rproj!!!!**
:::

::: columns
::: {.column width="55%"}
::: {style="font-size: 0.9em; color: #000000;"}
Here are some options:

1.  Save on your Desktop
2.  Make an "umbrella" STAT 331 folder that has two (2) subfolders

-   Your STAT331-portfolio-template
-   Your STAT331 folder (the one you've been working in for five weeks)
:::
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
![](images/project_location.png)
:::
:::

## Making Changes

::: {style="font-size: 2em; color: #B6CADA;"}
Change the `reflection_template.qmd` file!
:::

## Committing Your Changes

![](images/commit_changes.png)

## Pushing Your Changes

::: {style="font-size: 1.5em; color: #000000;"}
Were you unsuccessful? You likely need to configure your git!
:::

</br>

```
git config --global user.name "Laura Smith"
git config --global user.email lsmith@example.com
```