---
title: "Reshaping and Joining Data Frames"
format: 
  html: 
    theme: minty
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
editor: visual
execute: 
  echo: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
### change this if icons local
```

```{r, include = FALSE}
library(tidyverse)
library(flair)
```


In this lesson, you will learn:

* The importance of nicely formatted code and how to adhere to 
style "guidelines"

* How to **reshape** your dataset by pivoting *longer* or *wider*

* How to use **mutating joins** and **filtering joins** to combine different
datasets with related information.


---

`r emo::ji("play button")` Watch Videos: 25 minutes  

`r emo::ji("book")` Readings: 30-60 minutes   

`r emo::ji("computer")` Activities: 45-60 minutes  
  
`r emo::ji("check")` Check-ins: 2


---

# Code Style 

`r emo::ji("check")` **Check-in: _Code Style_**

You've been spending time and getting feedback on the formatting of your code. 
Based on what you've read, address the following questions. 

**Question 1:** Based on the tidyverse style guide, where should whitespace
(blank spaces) go? 

- Before and after every `+` sign

- Before and after every `%>%`

- Before and after every athematic operator (`+`, `-`, `*`, `/`)

- After every comma

- Before every comma

**Question 2:** How many characters per line should you strive to have in your 
R code (and RMarkdown files)?

**Question 3:** Based on the styleguide, which of the following are **bad**
object names?

- `data`

- `cereals_data`

- `cereals.data`

- `cerealsData`

- `cerealsdata`

- `cereals_data1`

- `cereals_data_clean`

---

# Reshaping Data

---

## Tidy Data and Reshaping

`r emo::ji("book")` [Required Reading: *R4DS* 12.1-12.3 (Tidy Data)](https://r4ds.had.co.nz/tidy-data.html)

`r emo::ji("play button")` [Required Video: Data Layouts -- 7 minutes](http://somup.com/crfFrmF6VQ)

`r emo::ji("play button")` [Required Video: Pivoting Longer -- 9 minutes](http://somup.com/crfF3NF6hg)

`r emo::ji("play button")` [Required Video: Pivoting Wider -- 9 minutes](http://somup.com/crfqebF63k)

`r emo::ji("book")` [Optional Reading: *R4DS* 12.4-12.5 (Separate / Unite and Missing Values)](https://r4ds.had.co.nz/tidy-data.html) -- A few more tricks for data cleaning / wrangling, if you're interested!


---

`r emo::ji("check")` **Check-in: _Pivoting_**

- Download the `cereal.csv` data here: [https://app.box.com/s/zcr1fijnwxs27nvtxn4p38p3sgtxl4bt](https://app.box.com/s/zcr1fijnwxs27nvtxn4p38p3sgtxl4bt)

**Question 1:** Create a new dataset called `cereals_long`, that has three
columns:

* The `name` of the cereal

* A column called `Nutrient` with values `"protein"`, `"fat"`, or `"fiber"`.

* A column called `Amount` with the corresponding amount of the nutrient.

```{r, include = FALSE}

cereals <- read_csv(here::here("4_tidyr-joins", "Coursework", "Slides", 
                               "cereal.csv")
                    )

cereals_long <- cereals %>% 
  select(name, protein:fiber) %>% 
  pivot_longer(protein:fiber, 
               names_to = "Nutrient", 
               values_to = "Amount")
  
```


---

# Joining data

---

`r emo::ji("book")` [Required Reading: *R4DS* Chapter 13 (Relational Data)](https://r4ds.had.co.nz/relational-data.html)


`r emo::ji("book")` [Required Reading: Mutating Joins](https://www.garrickadenbuie.com/project/tidyexplain/)

::: {.callout-important}
Note: We **will not** be using `spread()` and `gather()` in this course, as
they are deprecated functions!
:::

::: {.callout-note}
Because these chapters do a __much__
better job visualizing the concepts, I've chosen not to record additional
videos. 
:::

---

`r emo::ji("check")` **Check-in: _Practice with Joins_**

The following code creates three datasets:

```{r}
prof_info <- data.frame(
  professor = 
    c("Bodwin", "Glanz", "Carlton", "Sun", "Theobold"),
  undergrad_school = 
    c("Harvard", "Cal Poly", "Berkeley", "Harvard", "Colorado Mesa University"),
  grad_school = 
    c("UNC", "Boston University", "UCLA", "Stanford", "Montana State University")
)

prof_course <- data.frame(
  professor = c("Bodwin", "Glanz", "Carlton", "Theobold"),
  Stat_331 = c(TRUE, TRUE, TRUE, TRUE),
  Stat_330 = c(FALSE, TRUE, TRUE, FALSE),
  Stat_431 = c(TRUE, TRUE, FALSE, TRUE)
)

course_info <- data.frame(
  course = c("Stat_331", "Stat_330", "Stat_431"),
  num_sections = c(8, 3, 1)
)

```

Here is what they look like once created:

`prof_info`

```{r prof-info}

prof_info

prof_course 

course_info
```

These datasets contain information about five Cal Poly professors, their
educational history, the classes they are able to teach, and the number of
sections of each class that need to be assigned.

**a) Combine datasets 1 and 2 to make this dataset:**

```{r, echo = FALSE, message = FALSE}

prof_info %>% 
  inner_join(prof_course)

```

```{r, include = FALSE}
## OR 

prof_info %>%
  right_join(prof_course)

```

**b) Combine datasets 1 and 2 to make this dataset:**

```{r, echo = FALSE, message = FALSE}

prof_info %>% 
  left_join(prof_course, by = "professor")

```

```{r, include = FALSE}
## OR 

prof_info %>% 
  full_join(prof_course, by = "professor")

```


**c) Combine datasets 2 and 3 to make this dataset:**

```{r, echo = FALSE, message = FALSE}
prof_course %>%
  pivot_longer(Stat_331:Stat_431, 
               names_to = "course",
               values_to = "can_teach") %>%
  inner_join(course_info)

```

```{r, include = FALSE}
## OR

prof_course %>%
  pivot_longer(Stat_331:Stat_431, 
               names_to = "course",
               values_to = "can_teach") %>%
  right_join(course_info)

## OR

prof_course %>%
  pivot_longer(Stat_331:Stat_431, 
               names_to = "course",
               values_to = "can_teach") %>%
  left_join(course_info)

```

