---
title: "Lab 8: The 12 Days of Christmas"
format: 
  html: 
    theme: minty
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
    self-contained: true
editor: visual
execute: 
  echo: true
  eval: false
resources: 
  - pa8_starter.qmd
---

```{r setup}
#| include: false
#| eval: true

library(tidyverse)
```

<center>![](christmas_tree.jpg)</center>

## Introduction

The song "12 Days of Christmas", written around 1780, tells the tale of many gifts a person receives in the days leading up to Christmas ([link to lyrics](https://en.wikipedia.org/wiki/The_Twelve_Days_of_Christmas_(song)%5D(https://en.wikipedia.org/wiki/The_Twelve_Days_of_Christmas_(song)))).

These gifts repeat and compound; on the first day, the narrator receives

    A partridge in a pear tree.

On the twelfth day, they receive

    Twelve Drummers Drumming
    Eleven Pipers Piping
    Ten Lords a Leaping
    Nine Ladies Waiting
    Eight Maids a Milking
    Seven Swans a Swimming
    Six Geese a Laying
    Five Golden Rings
    Four Calling Birds
    Three French Hens
    Two Turtle Doves
    And a Partridge in a Pear Tree

This week, your task will be to write functions that automatically sing this very repetitive song. Today, we will start by writing two helper functions which we will use on Thursday to write a function to sing this song.

::: {.callout-tip}
Note that your functions can - and should! - reference each other. That is, don't duplicate code; use earlier, smaller functions inside your larger functions.
:::

## Getting Started 

### Starter Quarto File

I have assembled the skeleton code provided in these instructions into a starter Quarto file. You can download the [`pa8_starter.qmd` file here](pa8_starter.qmd). 

### The Dataset

Run the code provided in the Quarto file to load in a dataset called `xmas` that contains the crucial information about the gifts in the song. We will use this dataset to test out our functions as we work on them.

```{r}
xmas <- read_csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```


### Other packages

The functions included in the starter code are included in the `dplyr`, `stringr`, `glue`, and `purrr` packages, so make sure you have these packages installed! If you want to rely on functions from other packages that's fine, but you will need to load them in the set-up chunk.

::: {.callout-tip collapse="true"}
## Advice

### Workflow

Make smaller versions of the `xmas` dataset (e.g., the first two days).

Once you feel confident in your function code, use the smaller version of the data to test the functions you write, *before* you test them on the full dataset.

### Build from small pieces

If you have some trouble getting started, I recommend writing a function that works in one case, and then trying to generalize.

### Don't sweat the small stuff

There's a lot you can do to polish up the way the song prints. However, the goal of this lab is to practice writing functions and using iteration. Don't get bogged down in details like how the song displays, or small grammar rules (like commas!), until you've finished the main tasks.
:::


## Step One: Plurals

Note that the gifts are listed in singular: for example, on day five the narrator receives "five golden rings", but the entry in the dataset for the gift on day five simply says `"ring"`.

Using the skeleton of the `pluralize_gift()` function, complete the code so that the function takes a gift and returns the appropriate plural.

::: callout-tip
*Hint 1:* Note that the gifts on days six and nine have unusual pluralization. You may assume that in other datasets, there will be **no** additional special cases besides these types.

*Hint 2:* The following small example may be useful to you:

```{r}
#| eval: true
my_names <- c("Kimberly", "Trini", "Jason", 
              "Billy", "Zach", "Tommy")

my_names |> 
  str_c("s", sep = "") |> 
  str_replace("ys$", "ies")
```
:::

::: callout-caution
## No hard coded words! 

You should **absolutely not** "hard-code" anything into this function; this function should work in general, *for the gifts included in the song*. Meaning, the word "goose" should not appear anywhere in the function, but you can assume a "oo" transforms to a "ee" in the context of the 12 days of Christmas song. 
:::

### Test Your Function

Try your function out on the smaller and then larger gift dataset. Consider: is your function *vectorized*? It does not have to be, but you can try it out if you want!

```{r pluralize-test}
# Will work if your function is vectorized! 
pluralize_gift(xmas$Gift.Item)

# Will work if your function is not vectorized!
map_chr(xmas$Gift.Item, pluralize_gift)

```

## Step Two: Creating sentences

Write a function called `make_phrase()` that takes as input the necessary information, and returns a phrase. For example,

```{r}
make_phrase(num_word = "ten", 
            item = "lords", 
            verb = "a-leaping", 
            adjective = "", 
            location = "")
```

should return

    "ten lords a-leaping"

### Test Your Function

Try your function out on the `xmas` data, by making a new variable containing the daily phrases. Notice I've provided you with the starter code to use `pmap_chr()` to iterate through each row of the dataset to create a phrase. 

::: {.callout-tip}
Look up the help file for `pmap_chr()` -- what is specified in the `list()`? How does that translate into what your `make_phrase()` function needs as inputs?

If you are still a bit stuck, take another look at the [mapping over multiple arguments](https://r4ds.had.co.nz/iteration.html#mapping-over-multiple-arguments) section of *R for Data Science*. 
:::

```{r}
xmas2 <- xmas %>%
  mutate(Full.Phrase = pmap_chr(.l = list(), 
                                .f = make_phrase)
         )
```

## Submission

Your `Full.Phrase` column is the answer to this week's Practice Activity.

**Copy and paste your `Full.Phrase` column to show me the phrases you made!**
