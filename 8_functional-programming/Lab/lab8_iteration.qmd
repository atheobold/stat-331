---
title: "Lab 8: The 12 Days of Christmas"
format: 
  html: 
    theme: minty
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
editor: visual
execute: 
  echo: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

library(tidyverse)

```

<center>![](christmas_tree.jpg)</center>

# Singing the Song

Alright, so you've already created two helper functions, `pluralize_gift()` and `make_phrase()`, which you used at the end of the Practice Activity to create a column of song phrases / lines.

Today, you will use these phrases to write a function which sings the lines of song for a given day. We will then use this function to iterate through the 12 days of Christmas to get our song!

::: callout-note
Note, you will either need to copy over your functions from the Practice Activity into your new Quarto document or continue working in the Quarto file from the Practice Activity.
:::

## Step Three: Iteration.

Write a function called `sing_line()` that takes as input:

-   A dataset

-   A number indicating which day to sing about

-   The name of a column in the dataset that contains the phrases for each day.

For example,

    sing_line(xmas, 2, Full.Phrase)

should return

    On the second day of Christmas, my true love sent to me:
    two turtle doves and
    a partridge in a pear tree.

::: callout-tip
*Hint:* The `{{phrase_col}}` part, which I provided for you, lets you use column names as arguments to a function. Don't delete that line of code!
:::

```{r sing-day-function}
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the song phrases
# Return -- A string singing the line of the song with all gifts for the given day.

sing_day <- function(dataset, line, phrase_col){
  
  # Step 1: Setup the intro line
  num_word <- ____
  
  intro <- glue::glue("On the {num_word} day of Christmas")
  
  # Step 2: Sing the gift phrases

    phrases <- dataset |>
      pull( {{phrase_col}} )

  ????
    
  ## put it together
    
  ????

}

```

### A Small Test

```{r}
xmas |>
sing_line(num = 2, phrase_col = Full.Phrase)

```

### A Larger Test

```{r}
map_chr(1:12, ~ sing_line(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |>
  cat()

```

::: callout-note
Note that `.x` can be used exchangeably with `.`. We've used `.` for functions we've written inside the `across()` function(e.g., `across(.cols = everything(), .fns = ~sum(is.na(.))))`). I've chosen to use `.x` since it looks more like an object that is being input into the function!
:::

------------------------------------------------------------------------

## Step Four: Use Your Functions!

Run the following code to test out your functions! The output should be the lyrics for the entire 12 Days of Christmas song.

```{r}
xmas2 <- xmas |>
  mutate(
    day.num = as.character(english::english(Day)), 
    Full.Phrase = pmap_chr(.l = list(num_word = day.num, 
                                     item = Gift.Item, 
                                     verb = Verb, 
                                     adjective = Adjective, 
                                     location = Location), 
                           .f = make_phrase)
  )

map_chr(1:12, ~sing_line(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |>
  cat()

```

------------------------------------------------------------------------

## Revisions

**You will get an automatic revision for:**

-   Functions that do not work the way they are intended

-   "Hard-Coding" in functions.

-   Not using `map()` or `apply()` for iteration.

-   Not singing the full song. Remember, each day, you get the gift for that day *and* all the prior days.

------------------------------------------------------------------------

## Challenge -- Styling Your Song

It would be nice if your song output in a visually appealing way. Similar to Lab 2, for this Challenge, you will be provided with three options. You are required to do **at least one**, but are welcome to do more than one.

### Option 1

Ensure each phase (e.g., "two turtle doves") of your song is printed on its own line. For example, your function should output the following for `sing_line(xmas, num = 2, phrase_col = Full.Phrase)`:

    On the second day of Christmas, my true love gave to me: 
    two turtle doves and 
    a partridge in a pear tree

### Option 2

Ensure there are blank spaces between the different lines of the song. For example, when iterating your function, your output should look like the following:

    On the second day of Christmas, my true love gave to me: 
    two turtle doves and 
    a partridge in a pear tree

    On the first day of Christmas, my true love gave to me:
    a partridge in a pear tree

### Option 3

Ensure the lines of your song are grammatically correct. There are three components you should address in making your lines grammatically correct:

1.  Use of Commas -- each line should end in a comma *except* for the last line
2.  Use of And -- there should be an "and" included *either* at the [end]{.underline} of the second to last line *or* at the [beginning]{.underline} of the final line
3.  Use of Period -- there should be a period at the end of the final line

For example, your function should output the following for `sing_line(xmas, num = 3, phrase_col = Full.Phrase)`:

    On the third day of Christmas, my true love gave to me: 
    three french hens, 
    two turtle doves, and 
    a partridge in a pear tree.

::: callout-note
While I am a fan of the oxford comma, you do not have to use an oxford comma for the second to last phrase of your song. 
:::
