---
title: "Week 8: Iteration"
format: 
  html: 
    theme: minty
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
    self-contained: true
editor: visual
execute: 
  echo: true
---

```{r set-up}
#| include: false
library(tidyverse)
library(palmerpenguins)
library(lubridate)
```

`r emo::ji("play button")` Watch Videos: 30 minutes

-   `r emo::ji("link")` Link to **all** Slides from Videos: [here](https://app.box.com/s/ae5f0yollihcggzr6bghkwabkdz2y7g9)

`r emo::ji("book")` Readings: 45-60 minutes

`r emo::ji("computer")` Activities: 60 minutes

`r emo::ji("check")` Preview Activities: 1

------------------------------------------------------------------------

# Vectorized Functions

Operations in R are typically **vectorized** - that means, by default, the functions operate on *vectors* of values rather than a single value. This is a feature that applies to atomic vectors (and we don't even think about it):

```{r abs}
#| echo: true  
#| eval: true

x <- seq(from = -4, to = 12, by = 0.5)

abs(x)
```

Notice how the `abs()` function found the absolute value of each element of `x` without using a for-loop? In programming languages which don't have implicit support for vectorized computations, this above process might instead look like:

```{r abs-loop}
#| echo: true  
#| eval: true

x <- seq(from = -4, to = 12, by = 0.5)

for(i in 1:length(x)){
  x[i] <- abs(x[i])
}

x
```

::: column-margin
::: callout-tip
# `for()`-loop refresher

If you would like a refresher on how for-loops work, I would recommend watching this video: [iteration with `for()`-loops (10 minutes)](https://www.youtube.com/watch?v=sxIX9lzPjDQ) and / or reading the [`for()`-loops](https://r4ds.had.co.nz/iteration.html#for-loops) section of *R for Data Science*.
:::
:::

That is, we would need to apply the `abs()` function to each entry of `x`. For atomic vectors, this process of applying a function to each element is easy to do this by default; with a list, however, we need to be a bit more explicit (because everything that's passed into the function may not be the same type).

## Is every function vectorized?

Short answer, no. There exist occasions where you either can't or choose not to write a function that is vectorized. For example, if the function you've written makes use of `if()` statements, your function **cannot** operate on vectors. For example, take the `pos_neg_zero()` function below:

```{r if-function}
#| echo: true

pos_neg_zero <- function(x){
  stopifnot(is.numeric(x))
  
  if(x > 0){
    return("Greater than 0!")
  } else if (x < 0){
    return("Less than 0!")
  } else {
    return("Equal to 0!")
      }
}
```

When I call the `pos_neg_zero()` function on a vector I receive an error:

```{r if-error}
#| echo: true
#| error: true

x <- seq(from = -4, to = 4, by = 1)

pos_neg_zero(x)
```

</br>

This error means that the `if(x > 0)` condition can only be checked for something of length 1. So, to use this function on the vector `x`, you would need to apply the function individually to each element:

```{r loop-if}
#| echo: true
#| eval: true

result <- rep(NA, length(x))

for(i in 1:length(x)){
  result[i] <- pos_neg_zero(x[i])
}

result
```

::: column-margin
::: callout-tip
# Vector initialization

Note that I initialized a `result` vector to store the results of calling the `pos_neg_zero()` function for the vector `x`. Similar to C++ and Java, R is an assembly language that requires objects be created **before** they are used, which is why I couldn't initialize `result` inside the `for()`-loop. Second, when I initialized the `result` vector I made it the size I wanted, rather than iteratively making it larger and larger.
:::
:::

Yes, I could have written a "better" function which used a vectorized function (e.g., `case-when()`) instead of a non-vectorized function (e.g., `if()`).

```{r case-when}
#| echo: true
#| eval: true

pos_neg_zero <- function(x){
  stopifnot(is.numeric(x))
  
  state <- case_when(x > 0 ~ "Greater than 0!", 
                     x < 0 ~ "Less than 0!", 
                     .default = "Equal to 0!")
  return(state)
}
```

When I call this function on the vector `x`, I no longer receive an error:

```{r no-error}
#| echo: true
#| error: true

pos_neg_zero(x)
```

That's because the `case_when()` is **vectorized**!

## When can't you vectorize your function?

It is not always the case that we can write a "better" vectorized function. For example, let's suppose we are interested in finding the datatype of each column in a data frame. The `typeof()` function can tell us the datatype of a specific column in the `penguins` data frame:

```{r type-of}
#| echo: true
typeof(penguins$species)
```

But, I want the datatype of **every** column in the `penguins` data frame! But applying the `typeof()` function to `penguins` returns the object structure of the `penguins` data frame, not the datatype of its columns.

```{r type-of-df}
#| echo: true
typeof(penguins)
```

## What can you do?

Well, we could rely on our old CS 101 friend, the `for()`-loop:

```{r type-of-loop}
#| echo: true

data_type <- rep(NA, length = ncol(penguins))

for(i in 1:ncol(penguins)){
  data_type[i] <- typeof(penguins[[i]])
}

## Getting a nicely formatted table!
tibble(column = names(penguins), 
       type = data_type) %>% 
  pivot_wider(names_from = column, 
              values_from = type) %>% 
  knitr::kable()
```

</br>

For loops are not as important in R as they are in other languages because R is a functional programming language.

In R, `for()`-loops are not as important as they are in other languages. In fact, we would prefer not to use `for()`-loops as they do not take advantage of its functional programming language. Take for example, our friend `across()`. We have continually called on the `across()` function to reduce repetition in our code, when performing the *same* operation(s) on multiple columns.

```{r across-refresher}
penguins %>% 
  summarise(
    across(
      .cols = everything(), 
      .fns = ~sum(is.na(.x))
      )
    )
```

However, when you look at the source code for `across()` you will find a `for()`-loop:

```{r across-loop}
#| eval: false
for (j in seq_fns) {
  fn <- fns[[j]]
  out[[k]] <- fn(col, ...)
  k <- k + 1L
  }
```

::: column-margin
::: callout-tip
# Function in a function

The idea of passing a function to another function is an extremely powerful idea, and it's one of the behaviors that makes R a functional programming language.
:::
:::

This shows you that it is possible to include `for()`-loops in a function, and call that function instead of using the `for()`-loop directly.

# Functional Programming

Yes, it might take some time to get used to the idea of having a `for()`-loop built into a function, but it's worth the investment. In the rest of this coursework, you'll learn about and use the **purrr**[^1] package, which houses functions that eliminate the need for many common `for()`-loops.

[^1]: I fully support more R packages being cat themed.

The apply family of functions in base R (`apply()`, `lapply()`, `tapply()`, etc.) solve a similar problem, but **purrr** has more consistent behavior, which makes it easier to learn. We **will not** be working with the base functions in this course.

::: column-margin
::: callout-note
# Comparison of base R and purrr

If you are interested, you can find a [side-by-side comparison in this lesson comparing base and purrr functions](https://jennybc.github.io/purrr-tutorial/bk01_base-functions.html).

```{r, echo = FALSE, out.width = "35%"}
knitr::include_graphics("images/jenny_bryan.png")
```

You can find a video on [iteration with the `apply()` family (7 minutes) here](https://www.youtube.com/watch?v=NadUAnlrh-M).
:::
:::

The goal of using purrr functions instead of for loops is to allow you to break common list manipulation challenges into independent pieces:

-   How can you solve the problem for a single element of your object (e.g., vector, data frame, list)?

-   Once you've solved that problem, **purrr** takes care of generalizing your solution to every element in the object.

-   If you're working on a complex problem, how can you break the problem down into bite-sized pieces that each take one step closer to a solution? With purrr, you get lots of small pieces that you can compose together with the pipe.

I believe this structure makes it easier to solve complex problems, while also making your code easier to understand.

## Reading, Videos & Tutorial

::: column-margin
::: callout-tip
# purr cheatsheet

Cheatsheet for purrr functions can be found [here](https://github.com/rstudio/cheatsheets/blob/master/purrr.pdf).
:::

::: callout-note
# Continued reading

A More In-depth Exploration of Functionals -- [*Advanced R*](https://adv-r.hadley.nz/functionals.html)
:::
:::

`r emo::ji("book")` Please read [Sections 21.5 through 21.7 *R for Data Science*](https://r4ds.had.co.nz/iteration.html#the-map-functions)

`r emo::ji("play button")` [Iteration with the `map()` family (6 minutes)](https://www.youtube.com/watch?v=FPD3a6IHO6w)

`r emo::ji("computer")` [Required Tutorial: Iteration](https://rstudio.cloud/learn/primers/5)

## Preview Activity 7 -- Functional Programming

#### Question 1

Suppose we would like to find the median of the measurement variables (`bill_length_mm`, `bill_depth_mm`, `flipper_length_mm`, `body_mass_g`) from the `penguins` dataset (from the **palmerpenguins** package).

Which of the following will produce a [**vector**]{.underline} of the median of every measurement variable? *Select all that apply!*

*(a)*

```{r, eval = FALSE}
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  map(median, na.rm = TRUE)
```

*(b)*

```{r, eval = FALSE}
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  map_dbl(median, na.rm = TRUE)
```

*(c)*

```{r, eval = FALSE}
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  sapply(., median, na.rm = TRUE)
```

*(d)*

```{r, eval = FALSE}
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  lapply(., function(x) median(x, na.rm = TRUE))
```

### Question 2

Last week we discussed the challenge of standardizing many columns in a data frame. For example, If we wanted to standardize a numeric variable to be centered at the mean and scaled by the standard deviation, we could use the following function:

```{r}
standardize <- function(vec) {
  stopifnot(is.numeric(vec))
  
  # Center with mean
  deviations <- vec - mean(vec, na.rm = TRUE)
  # Scale with standard deviation
  newdata <- deviations / sd(vec, na.rm = TRUE)
  
  return(newdata)
}
```

Why does the following return a vector of `NA`s?

```{r, eval = FALSE}
penguins |>
  mutate(
    body_mass_g = map_dbl(body_mass_g, standardize)
  )
```

(a) Because `body_mass_g` needs to be passed to `standardize()` as an argument
(b) Because `mutate()` operates on rows, so `map_dbl()` is supplying `standardize()` with one row of `body_mass_g` at a time
(c) Because `map_dbl()` only takes one input, so you need to use `map2_dbl()` instead
(d) Because there is no function named `standardize()`, so it cannot be applied to the `body_mass_g` column
(e) `body_mass_g` is not a data frame so it is not a valid argument for `map_dbl()`

### Question 3

Which of the following returns a [**dataframe**]{.underline} with the standardized version of the numerical variables (`bill_length_mm`, `bill_depth_mm`, `flipper_length_mm`, `body_mass_g`) from the `penguins` dataset?

```{r}
#| eval: false
## Option (a)
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  map_df(standardize)

## Option (b)
penguins |> 
  map_at(bill_length_mm:body_mass_g, standardize)

## Option (c)
penguins |> 
  map_if(is.numeric, standardize)

## Option (d)
penguins |> 
  map_at(
    c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
    standardize
    )
```
